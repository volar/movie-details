openapi: 3.0.3
info:
  title: Swagger Movies API - OpenAPI 3.0.3
  description: |-
    This is the example express movies API 
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    Some useful links:
    - [The movies details repository](https://github.com/volar/movie-details)

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:4505/api/v1
paths:
  /movies:
    get:
      tags:
        - movies
      summary: "Retrieve all movies"
      description: "Get all movies from database"
      operationId: getAllMovies
      parameters: []
      responses:
        "200":
          description: "successful operation"
      security: []
    post:
      tags:
        - movies
      summary: Add a new movie to the store
      description: Add a new movie to the store
      operationId: addMovie
      requestBody:
        description: Create a new Movie in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Movie"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Movie"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movie"
        "405":
          description: Invalid input
      security: []
  /movies/{movieId}:
    get:
      tags:
        - movies
      summary: Find movie by ID
      description: Returns a single movie
      operationId: getMovieById
      parameters:
        - name: movieId
          in: path
          description: ID of movie to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movie"
            application/xml:
              schema:
                $ref: "#/components/schemas/Movie"
        "400":
          description: Invalid ID supplied
        "404":
          description: Movie not found
      security: []
    patch:
      tags:
        - movies
      summary: Update an existing movie
      description: Update an existing movie by Id
      operationId: updateMovie
      parameters:
        - name: movieId
          in: path
          description: ID of movie to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent movie in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Movie"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Movie"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movie"
        "400":
          description: Invalid ID supplied
        "404":
          description: movie not found
        "405":
          description: Validation exception
      security: []
    delete:
      tags:
        - movies
      summary: Delete an existing movie
      description: Delete an existing movie by Id
      operationId: deleteMovie
      parameters:
        - name: movieId
          in: path
          description: ID of movie to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movie"
        "400":
          description: Invalid ID supplied
        "404":
          description: movie not found
        "405":
          description: Validation exception
      security: []
components:
  schemas:
    Movie:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [10]
        movieName:
          type: string
          examples: [True Grit]
        director:
          type: string
          examples: [Sergio Leone]
        rating:
          type: number
          format: float
          examples: [9.7]
  requestBodies:
    Movie:
      description: Movie object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Movie"
        application/xml:
          schema:
            $ref: "#/components/schemas/Movie"
